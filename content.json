{"meta":{"title":"Joseph (Zhaoxu) Yang","subtitle":"","description":"Stay Hungry, Stay Foolish","author":"Joseph (Zhaoxu) Yang","url":"http://example.com","root":"/"},"pages":[{"title":"Categories","date":"2020-09-07T14:24:23.000Z","updated":"2020-09-07T14:33:58.932Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2020-09-07T14:24:17.000Z","updated":"2020-09-07T14:34:16.476Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"String vs StringBuffer vs StringBuilder","slug":"String vs StringBuffer vs StringBuilder","date":"2020-09-10T21:20:05.000Z","updated":"2020-09-10T22:03:04.247Z","comments":true,"path":"2020/09/10/String vs StringBuffer vs StringBuilder/","link":"","permalink":"http://example.com/2020/09/10/String%20vs%20StringBuffer%20vs%20StringBuilder/","excerpt":"","text":"IntroductionEvery modification in String creates a new String object, instead of directly changing the old one: e.g. concating two Strings, creating substring, etc. This causes the big problem: how to manipulate String without creating String garbage. StringBuffer is an older class while StringBuilder is newly added in Java 5. String String is immutable in java: this property is created by original Java design. When we represent a string in double quotes like “abcd” they are referred as String literal and String literals are created in String pools. Note, always compare two String objects using equals() in Java, do not use “==”. The “+” operator is overloaded for String and used to concatenate two String. Internally “+” operation is implemented using either StringBuffer or StringBuilder. Strings are backed up by Char Array. This could cause memory leak (because same character array is shared between source String and SubString which can prevent source String from being garbage collected.). String class overrides equals() and hashcode() method and two Strings are considered to be equal if they contain exactly same character in same order and in same case. If you want to ignore case comparison of two strings consider using equalsIgnoreCase() method. Problems with String ImmutabilityMany times we create a String and then perform a lot of operation on them (e.g. converting a string into uppercase, lowercase, getting substring out of it, concatenating with other string etc.). Since String is an immutable class every time a new String is created and the older one is discarded which creates lots of temporary garbage in the heap. If String is created using String literal, they remain in the String pool. To resolve this problem Java provides us, two Classes, StringBuffer and StringBuilder. StringBuffer is an older class but StringBuilder is relatively new and added in JDK 5. Difference between String and StringBufferThe main difference between String and StringBuffer is String is immutable while StringBuffer is mutable, which means that you can modify a StringBuffer object once you created it without creating any new object. This mutable property makes StringBuffer an ideal choice for dealing with Strings in Java. Difference between StringBuffer and StringBuilder StringBuffer: All public methods synchronized Thread safe Slower in runtime StringBuilder: Not synchronized Not thread safe Faster in runtime Summary String is immutable but StringBuffer and StringBuilder are mutable. StringBuffer is synchronized while StringBuilder is not which makes StringBuilder faster than StringBuffer. Concatenation operator “+” is internally implemented using either StringBuffer or StringBuilder. String if you need immutability StringBuffer if you need mutable + thread-safety StringBuilder if you need mutable + without thread-safety.","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"String","slug":"Java/String","permalink":"http://example.com/categories/Java/String/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"String","slug":"String","permalink":"http://example.com/tags/String/"}]},{"title":"Test","slug":"Test","date":"2020-09-07T14:29:57.000Z","updated":"2020-09-07T14:30:12.772Z","comments":true,"path":"2020/09/07/Test/","link":"","permalink":"http://example.com/2020/09/07/Test/","excerpt":"","text":"","categories":[{"name":"Test","slug":"Test","permalink":"http://example.com/categories/Test/"}],"tags":[{"name":"Test","slug":"Test","permalink":"http://example.com/tags/Test/"}]}],"categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"String","slug":"Java/String","permalink":"http://example.com/categories/Java/String/"},{"name":"Test","slug":"Test","permalink":"http://example.com/categories/Test/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"String","slug":"String","permalink":"http://example.com/tags/String/"},{"name":"Test","slug":"Test","permalink":"http://example.com/tags/Test/"}]}